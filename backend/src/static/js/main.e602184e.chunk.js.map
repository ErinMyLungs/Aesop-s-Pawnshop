{"version":3,"sources":["ErinTheme/ErinGraphTheme.js","IndividualPriceOverTimeGraph/PoTGraph.js","DefaultAggregateGraph/BaseGroupedChart.js","App.js","serviceWorker.js","index.js"],"names":["blue","white","black","colors","baseProps","width","height","padding","top","bottom","left","right","baseLabelStyles","fontFamily","fontSize","letterSpacing","fill","stroke","strokeWidth","area","assign","style","data","labels","axis","strokeLinecap","strokeLinejoin","grid","strokeDasharray","pointerEvents","ticks","size","bar","boxplot","max","maxLabels","median","medianLabels","min","minLabels","q1","q1Labels","q3","q3Labels","boxWidth","candlestick","candleColors","positive","negative","chart","errorbar","borderWidth","opacity","group","colorScale","line","pie","scatter","stack","tooltip","flyoutStyle","cornerRadius","pointerLength","voronoi","flyout","PoTGraph","props","state","modelNumber","nonTiData","tiData","placeHolder","development","this","apiString","fetch","then","results","json","jsonified_data","length","setState","unixtime","Date","toLocaleDateString","undefined","year","month","day","model","fetchModelData","axisStyle","axisLabel","tickLabels","legendData","name","symbol","post_id","push","className","display","theme","ErinGraphTheme","containerComponent","dependentAxis","label","tickFormat","price","convert_epoch_to_timestring","x","y","title","symbolSpacer","centerTitle","orientation","rowGutter","titleComponent","dx","labelComponent","Component","BaseGroupedChart","nonTiPrice","tiPrice","single_model","fetchAggregateData","domainPadding","Price","t","tickLabelComponent","dy","angle","offset","events","childName","target","eventHandlers","onClick","event","datum","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e602184e.chunk.js","sourcesContent":["import {assign} from \"lodash\";\n\n// *\n// * Colors\n// *\nconst yellow = \"#ffe119\";\nconst orange = \"#f58231\";\nconst pink = \"#fabebe\";\nconst lavender = \"#e6beff\";\nconst maroon = \"#800000\";\nconst navy = \"#000075\";\nconst blue = \"#4363d8\";\nconst grey = \"#a9a9a9\";\nconst white = \"#ffffff\";\nconst black = \"#000000\";\nconst colors = [blue, orange, maroon, navy, yellow, pink, lavender];\n// *\n// * Typography\n// *\nconst sansSerif = \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\";\nconst letterSpacing = \"normal\";\nconst fontSize = 12;\n// *\n// * Layout\n// *\nconst padding = 8;\nconst baseProps = {\n    width: 450,\n    height: 300,\n    padding: {top: 10, bottom: 50, left: 50, right: 50}\n};\n// *\n// * Labels\n// *\nconst baseLabelStyles = {\n    fontFamily: sansSerif,\n    fontSize,\n    letterSpacing,\n    padding,\n    fill: black,\n    stroke: \"transparent\",\n    strokeWidth: 1\n};\n\n// *\n// * Strokes\n// *\nconst strokeDasharray = \"10, 5\";\nconst strokeLinecap = \"round\";\nconst strokeLinejoin = \"round\";\n\nexport {colors, blue, orange, maroon, navy, yellow, pink, lavender};\n\nexport default {\n    area: assign(\n        {\n            style: {\n                data: {\n                    fill: black\n                },\n                labels: baseLabelStyles\n            }\n        },\n        baseProps\n    ),\n    axis: assign(\n        {\n            style: {\n                axis: {\n                    fill: \"transparent\",\n                    stroke: grey,\n                    strokeWidth: 2,\n                    strokeLinecap,\n                    strokeLinejoin\n                },\n                grid: {\n                    fill: \"none\",\n                    stroke: blue,\n                    strokeDasharray,\n                    strokeLinecap,\n                    strokeLinejoin,\n                    pointerEvents: \"painted\"\n                },\n                ticks: {\n                    fill: \"transparent\",\n                    size: 5,\n                    stroke: grey,\n                    strokeWidth: 1,\n                    strokeLinecap,\n                    strokeLinejoin\n                },\n            }\n        },\n        baseProps\n    ),\n    bar: assign(\n        {\n            style: {\n                data: {\n                    fill: white,\n                    padding,\n                    strokeWidth: 0\n                },\n                labels: baseLabelStyles\n            }\n        },\n        baseProps\n    ),\n    boxplot: assign(\n        {\n            style: {\n                max: {padding, stroke: white, strokeWidth: 1},\n                maxLabels: baseLabelStyles,\n                median: {padding, stroke: white, strokeWidth: 1},\n                medianLabels: baseLabelStyles,\n                min: {padding, stroke: white, strokeWidth: 1},\n                minLabels: baseLabelStyles,\n                q1: {padding, fill: white},\n                q1Labels: baseLabelStyles,\n                q3: {padding, fill: white},\n                q3Labels: baseLabelStyles\n            },\n            boxWidth: 20\n        },\n        baseProps\n    ),\n    candlestick: assign(\n        {\n            style: {\n                data: {\n                    stroke: white\n                },\n                labels: baseLabelStyles\n            },\n            candleColors: {\n                positive: \"#ffffff\",\n                negative: white\n            }\n        },\n        baseProps\n    ),\n    chart: baseProps,\n    errorbar: assign(\n        {\n            borderWidth: 8,\n            style: {\n                data: {\n                    fill: \"transparent\",\n                    opacity: 1,\n                    stroke: white,\n                    strokeWidth: 2\n                },\n                labels: baseLabelStyles\n            }\n        },\n        baseProps\n    ),\n    group: assign(\n        {\n            colorScale: colors\n        },\n        baseProps\n    ),\n    line: assign(\n        {\n            style: {\n                data: {\n                    fill: \"transparent\",\n                    opacity: 1,\n                    stroke: black,\n                    strokeWidth: 1\n                },\n                labels: baseLabelStyles\n            }\n        },\n        baseProps\n    ),\n    pie: assign(\n        {\n            colorScale: colors,\n            style: {\n                data: {\n                    padding,\n                    stroke: blue,\n                    strokeWidth: 1\n                },\n                labels: assign({}, baseLabelStyles, {padding: 20})\n            }\n        },\n        baseProps\n    ),\n    scatter: assign(\n        {\n            style: {\n                data: {\n                    fill: white,\n                    opacity: 1,\n                    stroke: \"transparent\",\n                    strokeWidth: 0,\n                    size: 1\n                },\n                labels: baseLabelStyles\n            }\n        },\n        baseProps\n    ),\n    stack: assign(\n        {\n            colorScale: colors\n        },\n        baseProps\n    ),\n    tooltip: {\n        style: assign({}, baseLabelStyles, {padding: 5, pointerEvents: \"none\"}),\n        flyoutStyle: {\n            stroke: black,\n            strokeWidth: 1,\n            fill: \"#f0f0f0\",\n            pointerEvents: \"none\"\n        },\n        cornerRadius: 5,\n        pointerLength: 10\n    },\n    voronoi: assign(\n        {\n            style: {\n                data: {\n                    fill: \"transparent\",\n                    stroke: \"transparent\",\n                    strokeWidth: 0\n                },\n                labels: assign({}, baseLabelStyles, {padding: 5, pointerEvents: \"none\"}),\n                flyout: {\n                    stroke: black,\n                    strokeWidth: 1,\n                    fill: \"#f0f0f0\",\n                    pointerEvents: \"none\"\n                }\n            }\n        },\n        baseProps\n    )\n};","import React, {Component} from 'react';\nimport {\n    VictoryAxis,\n    VictoryChart,\n    VictoryGroup,\n    VictoryContainer,\n    VictoryLabel,\n    VictoryLegend,\n    VictoryLine,\n    VictoryScatter\n} from 'victory';\nimport ErinGraphTheme, {blue, colors, orange} from \"../ErinTheme/ErinGraphTheme\";\nimport './PoTGraph.css';\n\nclass PoTGraph extends Component {\n    constructor(props) {\n        super(props);\n        this.state =\n            {\n                modelNumber: false,\n                nonTiData: [{\"post_id\": \"0\", \"datestring\": \"0\", \"created\": 1515150, \"price\": 0}, {\n                    \"post_id\": \"1\",\n                    \"datestring\": \"0\",\n                    \"created\": 1515000,\n                    \"price\": 10\n                }],\n                tiData: [{\"post_id\": \"placeholder\", \"datestring\": \"0\", \"created\": 1515000, \"price\": 10}],\n                placeHolder: [{\"post_id\": \"placeholder\", \"datestring\": \"0\", \"created\": 1515000, \"price\": 10}]\n            }\n    }\n\n    fetchModelData(modelNumber, development) {\n        if (this.state.modelNumber === modelNumber) {\n        } else {\n\n            // If development is true, route API calls to local flask server run on app.py\n            const apiString = (development ?\n                `http://127.0.0.1:5000/api/v0.1/model/${modelNumber}` :\n                `./api/v0.1/model/${modelNumber}`);\n\n            fetch(apiString)\n                .then(results => {\n                        // console.log(results.json());\n                        return results.json();\n                    }\n                ).then(\n                jsonified_data => {\n                    let nonTiData = jsonified_data[0];\n                    let tiData = jsonified_data[1].length === 0 ? this.state.placeHolder : jsonified_data[1];\n                    const state = {\n                        modelNumber: modelNumber,\n                        nonTiData: nonTiData,\n                        tiData: tiData\n                    };\n                    this.setState(state);\n                }\n            )\n        }\n    }\n\n    convert_epoch_to_timestring(unixtime) {\n        let options = {year: \"2-digit\", month: 'numeric', day: 'numeric'};\n        let new_date_object = new Date(unixtime * 1000);\n        return new_date_object.toLocaleDateString(undefined, options)\n    }\n\n    render() {\n        if (this.props.model === false) {\n        } else {\n            this.fetchModelData(this.props.model, this.props.development);\n\n            const axisStyle = {\n                axisLabel: {fontSize: 10, padding: 30},\n                tickLabels: {fontSize: 7, padding: 5}\n            };\n\n            let legendData = [\n                {name: \"Non-TI\", symbol: {fill: blue, size: 2}},\n            ];\n            if (this.state.tiData[0].post_id !== 'placeholder') {\n                legendData.push({name: \"TI\", symbol: {fill: orange, size: 2}})\n            }\n\n            return (\n                <div\n                    className={'price-over-time-chart'}\n                    style={{display: 'flex'}}\n                >\n\n                    <h2>Price of {this.props.model} over time</h2>\n\n                    <VictoryChart\n                        theme={ErinGraphTheme}\n                        containerComponent={\n                            <VictoryContainer\n                                style={{width: \"80%\"}}\n                            />}\n                    >\n\n                        <VictoryAxis\n                            dependentAxis\n                            style={axisStyle}\n                            label={\"Price ($ USD)\"}\n                            tickFormat={(price) => `$${price}`}\n                        />\n\n                        <VictoryAxis\n                            tickFormat={(unixtime) => `${this.convert_epoch_to_timestring(unixtime)}`}\n                            style={axisStyle}\n                            label={\"Date\"}\n                        />\n\n                        <VictoryGroup>\n\n                            <VictoryLine\n                                name={'non-ti-line'}\n                                data={this.state.nonTiData}\n                                x={'created'}\n                                y={'price'}\n                                style={{\n                                    data: {stroke: colors[0]}\n                                }}\n                            />\n\n                            <VictoryScatter\n                                name={'non-ti-points'}\n                                data={this.state.nonTiData}\n                                x={'created'}\n                                y={'price'}\n                                size={1.3}\n                                style={{data: {fill: colors[0]}}}\n                            />\n\n                            {/*TODO: Refactor this lower logic, it violates DRY. Maybe component?*/}\n                            {\n                                this.state.tiData.length !== 1 &&\n                                <VictoryLine\n                                    name={'ti-line'}\n                                    data={this.state.tiData}\n                                    x={'created'}\n                                    y={'price'}\n                                    style={{\n                                        data: {stroke: colors[1]}\n                                    }}\n                                />\n                            }\n\n                            {\n                                this.state.tiData[0].post_id !== 'placeholder' &&\n                                <VictoryScatter\n                                    name={'ti-points'}\n                                    data={this.state.tiData}\n                                    x={'created'}\n                                    y={'price'}\n                                    size={1.3}\n                                    style={{\n                                        data: {fill: colors[1]}\n                                    }}\n                                />\n                            }\n\n                        </VictoryGroup>\n\n                        <VictoryLegend\n                            x={300}\n                            y={15}\n                            title={\"Legend\"}\n                            symbolSpacer={25}\n                            centerTitle={false}\n                            orientation=\"vertical\"\n                            rowGutter={{bottom: -10}}\n                            titleComponent={<VictoryLabel dx={12} style={{fontSize: 12}}/>}\n                            labelComponent={<VictoryLabel dx={-20} style={{fontSize: 8}}/>}\n                            data={legendData}\n                        />\n\n                    </VictoryChart>\n                </div>\n            );\n        }\n    }\n}\n\nexport default PoTGraph;","import React, {Component} from 'react';\nimport {\n    VictoryChart,\n    VictoryGroup,\n    VictoryBar,\n    VictoryAxis,\n    VictoryLabel,\n    VictoryLegend,\n    VictoryContainer,\n} from 'victory';\nimport PoTGraph from \"../IndividualPriceOverTimeGraph/PoTGraph\";\nimport './BaseGroupedChart.css';\nimport ErinGraphTheme, {blue, orange} from \"../ErinTheme/ErinGraphTheme\";\n\n\nclass BaseGroupedChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [{model: 'placeholder', nonTiPrice: 0, tiPrice: 0},],\n            single_model: false\n        }\n    }\n\n    fetchAggregateData(development) {\n        // if development === true, route api fetch to local flask server\n        const apiString = (development ?\n            `http://127.0.0.1:5000/api/v0.1/model` :\n            `./api/v0.1/model`);\n        fetch(apiString)\n            .then(results => {\n                    return results.json();\n                }\n            ).then(\n            jsonified_data => {\n                this.setState({data: jsonified_data});\n            }\n        )\n    }\n\n    render() {\n        if (this.state.data.length === 1) {\n            this.fetchAggregateData(this.props.development)\n        }\n\n        return (\n            <div>\n                <div\n                    className={'base-grouped-chart'}\n                    style={{display: 'flex'}}\n                >\n\n                    <h2>Average GPU Price in Dollars</h2>\n\n                    {this.state.single_model === false && <h4>Click on a bar to see sale price over time</h4>}\n\n                    <VictoryChart\n                        title={\"Average GPU Price in Dollars\"}\n                        domainPadding={{x: 10}}\n                        theme={ErinGraphTheme}\n                        containerComponent={\n                            <VictoryContainer\n                                style={{width: \"80%\"}}\n                            />}\n                    >\n\n                        <VictoryAxis\n                            dependentAxis={true}\n                            label={\"Average Price ($ USD)\"}\n                            tickFormat={(Price) => `$${Price}`}\n                            style={{\n                                axisLabel: {fontSize: 10, padding: 30},\n                                tickLabels: {fontSize: 7, padding: 5}\n                            }}\n                        />\n\n                        <VictoryAxis\n                            dependentAxis={false}\n                            label={\"GPU Models (Arranged by Generation)\"}\n                            tickFormat={(t) => `${t > 2000 ? 'RTX ' : 'GTX '} ${t}`}\n                            tickLabelComponent={\n                                <VictoryLabel\n                                    dy={-3}\n                                />}\n                            style={{\n                                axisLabel: {fontSize: 10, padding: 30, angle: 0},\n                                tickLabels: {fontSize: 7, padding: 10, angle: -45}\n                            }}\n                        />\n\n                        <VictoryGroup\n                            name={'aggregate-average-price-graph'}\n                            offset={5}\n                            style={{data: {width: 5}}}\n                            events={[{\n                                childName: ['non-ti-bar', 'ti-bar'],\n                                target: \"data\",\n                                eventHandlers: {\n                                    onClick: (event, data) => {\n                                        this.setState({single_model: data.datum.model});\n                                    }\n                                }\n                            }]}>\n\n                            <VictoryBar\n                                name={'non-ti-bar'}\n                                data={this.state.data}\n                                x={\"model\"}\n                                y={\"nonTiPrice\"}\n                            />\n\n                            <VictoryBar\n                                name={'ti-bar'}\n                                data={this.state.data}\n                                x={'model'}\n                                y={\"tiPrice\"}\n                            />\n\n                        </VictoryGroup>\n\n                        <VictoryLegend\n                            x={275}\n                            y={15}\n                            title={\"Legend\"}\n                            symbolSpacer={25}\n                            centerTitle={false}\n                            orientation=\"vertical\"\n                            rowGutter={{bottom: -10}}\n                            titleComponent={<VictoryLabel dx={12} style={{fontSize: 12}}/>}\n                            labelComponent={<VictoryLabel dx={-20} style={{fontSize: 8}}/>}\n                            data={[\n                                {name: \"TI\", symbol: {fill: orange, size: 2}},\n                                {name: \"Non-TI\", symbol: {fill: blue, size: 2}}\n                            ]}\n                        />\n\n                    </VictoryChart>\n                </div>\n\n                < div className={'price-over-time-chart'}>\n                    {\n                        this.state.single_model !== false &&\n                        <PoTGraph model={this.state.single_model} development={this.props.development}/>\n                    }\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default BaseGroupedChart;\n","import React from 'react';\nimport './App.css';\nimport BaseGroupedChart from \"./DefaultAggregateGraph/BaseGroupedChart\";\n\nfunction App() {\n    const development = false;\n    return (\n        <div className=\"App\">\n            <h1>Used GPU Market on /r/hardwareswap</h1>\n            <p> A visualization dashboard to look at used GPU pricing for NVidia GPUs. </p>\n            <BaseGroupedChart development={development}/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all frontend tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}