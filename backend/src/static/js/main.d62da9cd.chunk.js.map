{"version":3,"sources":["DefaultAggregateGraph/BaseGroupedChart.js","App.js","serviceWorker.js","index.js"],"names":["BaseGroupedChart","props","state","data","model","nonTiPrice","tiPrice","fetch","then","results","json","jsonified_data","setState","this","length","fetchAggregateData","className","style","display","title","domainPadding","x","dependentAxis","label","tickFormat","Price","axisLabel","fontSize","padding","tickLabels","tickLabelComponent","dy","angle","offset","colorScale","width","y","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2YA+FeA,G,mBA1FX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CAGTC,KAAM,CACF,CAACC,MAAO,MAAOC,WAAY,GAAIC,QAAS,KANjC,E,kFAaD,IAAD,OACbC,MAAM,oBACDC,MAAK,SAAAC,GACF,OAAOA,EAAQC,UAEjBF,MACE,SAAAG,GACI,EAAKC,SAAS,CAACT,KAAMQ,S,+BAWjC,OAJ+B,IAA3BE,KAAKX,MAAMC,KAAKW,QAChBD,KAAKE,qBAIL,yBACIC,UAAW,qBACXC,MAAO,CAACC,QAAS,SAGjB,4DAEA,kBAAC,IAAD,CACIC,MAAO,+BACPC,cAAe,CAACC,EAAG,KAGnB,kBAAC,IAAD,CACIC,eAAe,EACfC,MAAO,sBACPC,WAAY,SAACC,GAAD,iBAAeA,IAC3BR,MAAO,CACHS,UAAW,CAACC,SAAU,GAAIC,QAAS,IACnCC,WAAY,CAACF,SAAU,EAAGC,QAAS,MAI3C,kBAAC,IAAD,CACIN,eAAe,EACfC,MAAO,sCACPO,mBAAoB,kBAAC,IAAD,CAAcC,IAAK,IACvCd,MAAO,CACHS,UAAW,CAACC,SAAU,GAAIC,QAAS,GAAII,MAAO,GAC9CH,WAAY,CAACF,SAAU,EAAGC,QAAS,GAAII,OAAQ,OAIvD,kBAAC,IAAD,CACIC,OAAQ,EACRC,WAAY,cACZjB,MAAO,CAACd,KAAM,CAACgC,MAAO,KAGtB,kBAAC,IAAD,CACIhC,KAAMU,KAAKX,MAAMC,KACjBkB,EAAG,QACHe,EAAG,YAGP,kBAAC,IAAD,CACIjC,KAAMU,KAAKX,MAAMC,KACjBkB,EAAG,QACHe,EAAG,sB,GAhFAC,cCUhBC,MAVf,WACI,OACI,yBAAKtB,UAAU,OACX,kEACA,uGACA,kBAAC,EAAD,QCGQuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,MAAK,SAAA2C,GACjCA,EAAaC,kB","file":"static/js/main.d62da9cd.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {VictoryChart, VictoryGroup, VictoryBar, VictoryAxis, VictoryLabel, VictoryLegend} from 'victory';\nimport './BaseGroupedChart.css';\n\nclass BaseGroupedChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            //Placeholder data TODO: Hook into flask api\n\n            data: [\n                {model: '760', nonTiPrice: 69, tiPrice: 0},\n\n            ],\n\n        }\n    }\n\nfetchAggregateData() {\n        fetch('./api/v0.1/model')\n            .then(results => {\n                return results.json();\n                }\n            ).then(\n                jsonified_data => {\n                    this.setState({data: jsonified_data});\n                }\n        )\n}\n\n    render() {\n        \n        if (this.state.data.length === 1) {\n            this.fetchAggregateData()\n        }\n\n        return (\n            <div\n                className={'base-grouped-chart'}\n                style={{display: 'flex'}}\n            >\n\n                <h3>Average GPU Price in Dollars</h3>\n\n                <VictoryChart\n                    title={\"Average GPU Price in Dolalrs\"}\n                    domainPadding={{x: 10}}\n                >\n                    {/*TODO: Add legend*/}\n                    <VictoryAxis\n                        dependentAxis={true}\n                        label={\"Average Price ($USD\"}\n                        tickFormat={(Price) => `$${Price}`}\n                        style={{\n                            axisLabel: {fontSize: 10, padding: 30},\n                            tickLabels: {fontSize: 7, padding: 5}\n                        }}\n                    />\n\n                    <VictoryAxis\n                        dependentAxis={false}\n                        label={\"GPU Models (Arranged by Generation)\"}\n                        tickLabelComponent={<VictoryLabel dy={-3}/>}\n                        style={{\n                            axisLabel: {fontSize: 10, padding: 30, angle: 0},\n                            tickLabels: {fontSize: 7, padding: 10, angle: -90}\n                        }}\n                    />\n\n                    <VictoryGroup\n                        offset={5}\n                        colorScale={'qualitative'}\n                        style={{data: {width: 5}}}\n                    >\n\n                        <VictoryBar\n                            data={this.state.data}\n                            x={\"model\"}\n                            y={\"tiPrice\"}\n                        />\n\n                        <VictoryBar\n                            data={this.state.data}\n                            x={'model'}\n                            y={\"nonTiPrice\"}\n                        />\n\n                    </VictoryGroup>\n                </VictoryChart>\n            </div>\n\n        );\n    }\n}\n\nexport default BaseGroupedChart;","import React from 'react';\nimport './App.css';\nimport BaseGroupedChart from \"./DefaultAggregateGraph/BaseGroupedChart\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <h1>Used GPU Market on /r/hardwareswap</h1>\n            <p> A visualization dashboard to look at used GPU pricing for NVidia GPUs. </p>\n            <BaseGroupedChart/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all frontend tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}