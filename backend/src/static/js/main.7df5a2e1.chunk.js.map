{"version":3,"sources":["IndividualPriceOverTimeGraph/PoTGraph.js","DefaultAggregateGraph/BaseGroupedChart.js","App.js","serviceWorker.js","index.js"],"names":["PoTGraph","props","state","modelNumber","nonTiData","tiData","this","apiString","fetch","then","results","json","jsonified_data","setState","fetchModelData","model","className","style","display","tickValues","datum","datestring","name","data","x","y","labels","length","Component","BaseGroupedChart","nonTiPrice","tiPrice","single_model","fetchAggregateData","title","domainPadding","dependentAxis","label","tickFormat","Price","axisLabel","fontSize","padding","tickLabels","tickLabelComponent","dy","angle","offset","width","events","childName","target","eventHandlers","onClick","event","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7df5a2e1.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {\n    VictoryAxis,\n    VictoryChart,\n    VictoryGroup,\n    VictoryLabel,\n    VictoryLegend,\n    VictoryLine,\n    VictoryScatter\n} from 'victory';\nimport './PoTGraph.css';\n\nclass PoTGraph extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            modelNumber: false,\n            nonTiData: [{}],\n            tiData: [{}]\n        }\n    }\n\n    fetchModelData(modelNumber) {\n        if (this.state.modelNumber === modelNumber) {\n        } else {\n            const apiString = `./api/v0.1/model/${modelNumber}`;\n            fetch(apiString)\n                .then(results => {\n                        return results.json();\n                    }\n                ).then(\n                jsonified_data => {\n                    let nonTiData = jsonified_data[0];\n                    let tiData = jsonified_data[1];\n                    this.setState({\n                        modelNumber: modelNumber,\n                        nonTiData: nonTiData,\n                        tiData: tiData\n                    });\n                }\n            )\n        }\n    }\n\n    render() {\n        this.fetchModelData(this.props.model);\n        return (\n            <div\n                className={'price-over-time-chart'}\n                style={{display: 'flex'}}\n            >\n                <h4>Price of {this.props.model} over time</h4>\n\n                <VictoryChart>\n                    <VictoryGroup\n                        tickValues={({datum}) => `${datum.datestring}`}\n                    >\n                        <VictoryLine\n                            name={'non-ti-line'}\n                            data={this.state.nonTiData}\n                            x={'created'}\n                            y={'price'}\n                            labels={({datum}) => `${datum.datestring}`}\n                        />\n                        <VictoryScatter\n                            name={'non-ti-points'}\n                            data={this.state.nonTiData}\n                            x={'created'}\n                            y={'price'}\n                        />\n                        {/*TODO: Refactor this lower logic, it violates DRY. Maybe component?*/}\n                        {\n                            this.state.tiData.length !== 0 &&\n                            <VictoryLine\n                                name={'ti-line'}\n                                data={this.state.tiData}\n                                x={'created'}\n                                y={'price'}\n                                labels={({datum}) => `${datum.datestring}`}\n                            />\n                        }\n\n                        {\n                            this.state.tiData.length !== 0 &&\n                            <VictoryScatter\n                                name={'ti-points'}\n                                data={this.state.tiData}\n                                x={'created'}\n                                y={'price'}\n                            />\n                        }\n\n                    </VictoryGroup>\n                </VictoryChart>\n\n            </div>\n        );\n    }\n}\n\n\nexport default PoTGraph;","import React, {Component} from 'react';\nimport {VictoryChart, VictoryGroup, VictoryBar, VictoryAxis, VictoryLabel, VictoryLegend, VictoryTheme} from 'victory';\nimport PoTGraph from \"../IndividualPriceOverTimeGraph/PoTGraph\";\nimport './BaseGroupedChart.css';\n\nclass BaseGroupedChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [\n                {model: ' ', nonTiPrice: 0, tiPrice: 0},\n            ],\n            single_model: false\n        }\n    }\n\n    fetchAggregateData() {\n        fetch('./api/v0.1/model')\n            .then(results => {\n                    return results.json();\n                }\n            ).then(\n            jsonified_data => {\n                this.setState({data: jsonified_data});\n            }\n        )\n    }\n\n    render() {\n        const development = false;\n\n        if (development === false) {\n            if (this.state.data.length === 1) {\n                this.fetchAggregateData()\n            }\n        } else if (this.state.data.length === 1 && development === true) {\n            this.setState({\n                data: [{model: '760', nonTiPrice: 69, tiPrice: 0},\n                    {model: '780', nonTiPrice: 107, tiPrice: 110},\n                    {model: '950', nonTiPrice: 56, tiPrice: 0},\n                    {model: '960', nonTiPrice: 81, tiPrice: 0},\n                    {model: '970', nonTiPrice: 102, tiPrice: 0},\n                    {model: '980', nonTiPrice: 201, tiPrice: 235},\n                    {model: '1030', nonTiPrice: 64, tiPrice: 0},\n                    {model: '1050', nonTiPrice: 103, tiPrice: 104},\n                    {model: '1060', nonTiPrice: 154, tiPrice: 0},\n                    {model: '1070', nonTiPrice: 240, tiPrice: 285},\n                    {model: '1080', nonTiPrice: 347, tiPrice: 494},\n                    {model: '1650', nonTiPrice: 132, tiPrice: 0},\n                    {model: '1660', nonTiPrice: 168, tiPrice: 221},\n                    {model: '2060', nonTiPrice: 315, tiPrice: 0},\n                    {model: '2070', nonTiPrice: 430, tiPrice: 0},\n                    {model: '2080', nonTiPrice: 610, tiPrice: 562},]\n            })\n        }\n\n        return (\n            <div>\n                <div\n                    className={'base-grouped-chart'}\n                    style={{display: 'flex'}}\n                >\n\n                    <h3>Average GPU Price in Dollars</h3>\n\n                    <VictoryChart\n                        title={\"Average GPU Price in Dollars\"}\n                        domainPadding={{x: 10}}\n                    >\n\n                        {/*TODO: Add legend*/}\n                        <VictoryAxis\n                            dependentAxis={true}\n                            label={\"Average Price ($ USD)\"}\n                            tickFormat={(Price) => `$${Price}`}\n                            style={{\n                                axisLabel: {fontSize: 10, padding: 30},\n                                tickLabels: {fontSize: 7, padding: 5}\n                            }}\n                        />\n\n                        <VictoryAxis\n                            dependentAxis={false}\n                            label={\"GPU Models (Arranged by Generation)\"}\n                            tickLabelComponent={<VictoryLabel dy={-3}/>}\n                            style={{\n                                axisLabel: {fontSize: 10, padding: 30, angle: 0},\n                                tickLabels: {fontSize: 7, padding: 20, angle: -45}\n                            }}\n                        />\n\n                        <VictoryGroup\n                            name={'testing'}\n                            offset={5}\n                            // colorScale={'qualitative'}\n                            style={{data: {width: 5}}}\n                            events={[{\n                                childName: ['bar-1', 'bar-2'],\n                                target: \"data\",\n                                eventHandlers: {\n                                    onClick: (event, data) => {\n                                        this.setState({single_model: data.datum.model});\n                                    }\n                                }\n                            }]}\n                        >\n\n                            <VictoryBar\n                                name={'bar-1'}\n                                data={this.state.data}\n                                x={\"model\"}\n                                y={\"tiPrice\"}\n                            />\n\n                            <VictoryBar\n                                name={'bar-2'}\n                                data={this.state.data}\n                                x={'model'}\n                                y={\"nonTiPrice\"}\n                            />\n\n                        </VictoryGroup>\n                    </VictoryChart>\n                </div>\n\n                <div className={'price-over-time-chart'}>\n                    {\n                        this.state.single_model !== false &&\n                        <PoTGraph model={this.state.single_model}/>\n                    }\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default BaseGroupedChart;\n","import React from 'react';\nimport './App.css';\nimport BaseGroupedChart from \"./DefaultAggregateGraph/BaseGroupedChart\";\nimport PoTGraph from \"./IndividualPriceOverTimeGraph/PoTGraph\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <h1>Used GPU Market on /r/hardwareswap</h1>\n            <p> A visualization dashboard to look at used GPU pricing for NVidia GPUs. </p>\n            <BaseGroupedChart/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all frontend tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}